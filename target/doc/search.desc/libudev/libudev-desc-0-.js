searchState.loadedDescShard("libudev", 0, "A device was added.\nA device attribute.\nIterator over a device’s attributes.\nA device changed.\nA libudev context. Contexts may not be sent or shared …\nA structure that provides access to sysfs/kernel devices.\nIterator over devices.\nAn enumeration context.\nContains the error value\nThe error type for libudev operations.\nTypes of errors that occur in libudev.\nAn event that indicates a change in device state.\nTypes of events that can be received from udev.\nMonitors for device events.\nAn active monitor that can receive events.\nContains the success value\nIterator over a device’s properties.\nA device property.\nA device was removed.\nA <code>Result</code> type for libudev operations.\nAn unknown event occurred.\nIncludes the device with the given syspath.\nReturns the file descriptor of the monitor’s socket.\nRetrieves the value of a device attribute.\nReturns an iterator over the device’s attributes.\nRemoves all filters currently set on the monitor.\nIncrements reference count of <code>libudev</code> context.\nReturns a description of the error.\nReturns the device associated with this event.\nReturns the path to the device node belonging to the …\nGets the device’s major/minor number.\nReturns the kernel devpath value of the device.\nReturns the devtype name of the device.\nReturns the name of the kernel driver attached to the …\nDecrements reference count of <code>libudev</code> context.\nReturns the <code>EventType</code> corresponding to this event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a device for a given syspath.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the device has already been handled by udev.\nReturns the corresponding <code>ErrorKind</code> for this error.\nListens for events matching the current filters.\nAdds a filter that matches only devices with the given …\nAdds a filter that matches only initialized devices.\nIncludes the parent device and all devices in the subtree …\nAdds a filter that matches only devices with the given …\nAdds a filter that matches only devices that belong to the …\nAdds a filter that matches events for devices with the …\nAdds a filter that matches events for devices with the …\nAdds a filter that matches only devices with the given …\nAdds a filter that matches only devices with the given tag.\nAdds a filter that matches events for devices with the …\nReturns the property name.\nReturns the attribute name.\nCreates a new context.\nCreates a new Enumerator.\nCreates a new <code>Monitor</code>.\nAdds a filter that matches only devices that don’t have …\nAdds a filter that matches only devices that don’t …\nReturns the parent of the device.\nReturns an iterator over the device’s properties.\nRetrieves the value of a device property.\nReceives the next available event from the monitor.\nScans <code>/sys</code> for devices matching the attached filters.\nReturns the event’s sequence number.\nSets the value of a device attribute.\nReturns the subsystem name of the device.\nReturns the kernel device name for the device.\nReturns the instance number of the device.\nReturns the syspath of the device.\nReturns the property value.\nReturns the attribute value.")